import os

#author: Tychele N. Turner, Ph.D.
#email: tycheleturner@gmail.com

if config == {}:
    configfile: "../config.json"

REFERENCE = config["reference"]
DATA_DIR = config["data_dir"]
FILE_TAIL = config["file_tail"]
PICARD = config["picard"]
JAVA = config["java"]
MITONAME = config["mitoname"]

SAMPLES = []
for file in os.listdir(DATA_DIR):
    if file.endswith(FILE_TAIL):
        SAMPLES.append(str(file).split(FILE_TAIL)[0])
print(SAMPLES)

rule all:
    input: expand("%s/{sample}%s"%(DATA_DIR,FILE_TAIL), sample = SAMPLES), expand("{sample}.MT.sam", sample = SAMPLES), expand("{sample}.MT.clean.sam", sample = SAMPLES), expand("{sample}.MT.clean.bam", sample = SAMPLES), expand("{sample}.MT.clean.bam.bai", sample = SAMPLES), expand("{sample}.MT.clean.name.bam", sample = SAMPLES)
    params: sge_opts="-l mfree=20G -N run_all"

rule reheader_bam:
    input: "{sample}.MT.clean.bam"
    output: "{sample}.MT.clean.name.bam"
    params: prefix="{sample}", sge_opts="-l mfree=1G,h_rt=2:00:00 -N rename -cwd"
    shell: "export PATH=/opt/conda/bin:$PATH && {PICARD} AddOrReplaceReadGroups INPUT={input} OUTPUT={output} SORT_ORDER=coordinate RGID={params.prefix} RGLB={params.prefix} RGPL=illumina RGPU={params.prefix} RGSM={params.prefix} CREATE_INDEX=true"

rule index_bam:
    input: "{sample}.MT.clean.bam"
    output: "{sample}.MT.clean.bam.bai"
    benchmark: "{sample}.index.bam.benchmark"
    params: sge_opts="-l mfree=1G -N index_bam -cwd"
    shell: """
    export PATH=/opt/conda/bin:$PATH
    samtools index {input}
    """

rule convert_to_bam:
    input: "{sample}.MT.clean.sam"
    output: "{sample}.MT.clean.bam"
    benchmark: "{sample}.convert.to.bam.benchmark"
    params: sge_opts="-l mfree=2G -N convert_to_bam -cwd"
    shell: """
    export PATH=/opt/conda/bin:$PATH
    samtools view -Sb {input} > {output}
    """

rule filter_on_greater_than_10_percent_mismatch:
    input: "{sample}.MT.sam"
    output: "{sample}.MT.clean.sam"
    benchmark: "{sample}.filter.mito.benchmark"
    params: sge_opts="-l mfree=1G -N filter_on_greater_than_10_percent_mismatch -cwd"
    shell: """
    export PATH=/opt/conda/bin:$PATH &&
    egrep -w 'NM:i:1||NM:i:2||NM:i:3||NM:i:4||NM:i:5||NM:i:6||NM:i:7||NM:i:8||NM:i:9||NM:i:10||NM:i:11||NM:i:12||NM:i:13||NM:i:14||' {input} | grep -v 'NNNNNNNNNN' > {output}
    """

rule extract_mitochondria:
    input: "%s/{sample}%s"%(DATA_DIR,FILE_TAIL)
    output: "{sample}.MT.sam"
    benchmark: "{sample}.extract.mito.benchmark"
    params: sge_opts="-l mfree=1G -N extract_mitochondria -cwd"
    shell: """
    export PATH=/opt/conda/bin:$PATH &&
    samtools view -T {REFERENCE} -h {input} {MITONAME} > {output}
    """

rule clean:
    shell: """
    export PATH=/opt/conda/bin:$PATH
    rm *sam
    rm *.MT.clean.bam
    rm *.MT.clean.bam.bai

    """

